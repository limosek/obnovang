#!/bin/sh
#
# This script is part of OBNOVA system by Lukas Kubin,
# http://obnova.sourceforge.net
#
# Copyright (C) 2003,2004 Lukas Kubin
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

export LANG=cs_CZ.utf8
export COLUMNS=80
export ROWS=25

. /etc/obnova-included.conf

exitfunc ()
{
  CODE=$1; [ "$CODE" = "" ] && CODE="0"
  EXIT=$2;

  # ujistime se
  killall rsync >/dev/null 2>/dev/null; true

  # Change the following to something better - eg. some config file parameter
  GROUPNAME=$(cat $ETCDIR/GROUPNAME)
  [ "$GROUPNAME" = "kiosky" ] && EXIT=reboot

  if [ $CODE -ne 0 ]; then echo -e $TES"Behem provadeni ridiciho skriptu obnovy nastala chyba!"$TEE; zabbixlog "Fail"; else zabbixlog "OK"; fi
  ! getcmdflag unattended && (echo -e -n $TQS"Stisknutim klavesy <ENTER> ukoncite system Obnova."$TQE" " ; read A)
  ifconfig eth0 up
  umount -a
  sync
  sleep 4
  if [ "$EXIT" = "reboot" ]; then
	logoend 5 reboot
	if  [ $CODE -ne 0 ]; then
		bugreport
	fi
	sleep 5
	rebootfunc
  else
    if [ $CODE -ne 0 ]; then
  	logoend 600 halt
  	bugreport
	ethtool -s eth0 wol g
        sleep 600
        haltfunc
    else
  	logoend 5 halt
  	sleep 5
  	haltfunc
    fi 
  fi
  exit
}

haltfunc () {
	[ "$NTP" = "1" ] && hwclock -w
	ethtool -s eth0 wol g
	poweroff -f
}

rebootfunc () {
	[ "$NTP" = "1" ] && hwclock -w
	reboot -f
}

getcompname () {
  IP=`ifconfig eth0 | grep "inet addr" | sed -e "s/^.*inet addr:\(.*\) Bcast.*$/\1/"`
  NAME=`host $IP | cut -d ' ' -f 5`
  HOST=`echo $NAME | cut -d '.' -f 1`
  echo $HOST
}

#
# Logging function
#
log ()
{
	echo "l$1:$2" >/dev/tty7
	[ "$LOGSERVER" = "" ] && return 0 # Do nothing if logging daemon not running
	THISLEVEL=$1
	MESSAGE=$2

	if [ $THISLEVEL -le $LOGLEVEL ]; then
		logger -t obnova "$MESSAGE" &
	fi
}

zabbixlog ()
{
. /etc/obnova-embed.conf
	  COMPNAME=`getcompname`
	  if ! zabbix_sender -z "$ZABBIXHOST" -p 10051 -s "$COMPNAME" -k obnova -o "$1" >&2; then
	    if ! zabbix_sender -z "$ZABBIXHOST" -p 10051 -s "$COMPNAME" -k obnova -o "$1" >&2; then
	      echo "Chyba v posilani do zabbixu!"
	    fi
	  fi
}

bugreport ()
{
   H=`getcompname`
   mkdir /tmp/$H
   mv /obnova-err.log /obnova-info.log /tmp/$H/
   rsync -rz /tmp/$H rsync://$OBNOVAPATH/obnovalog/
}

logolite ()
{
TXT="ObnovaNG $OBNOVANG_REV\\n"
TXT="$TXT Inicializace, prosim vyckejte..."
dialog --backtitle 'SYSTEM OBNOVY SKUPIN POCITACOVYCH STANIC' --begin 4 1 --ascii-lines --infobox "$TXT" 10 $COLUMNS	
}

logoend ()
{
if [ "$2" = "halt" ]; then
  TXT="Dojde k vypnuti systemu nejpozdeji za $1 sekund."
else
  TXT="Dojde k restartu systemu nejpozdeji za $1 sekund."
fi
dialog --backtitle 'SYSTEM OBNOVY SKUPIN POCITACOVYCH STANIC' --begin 4 1 --ascii-lines --infobox "$TXT" 10 $COLUMNS	
}

logo ()
{
TXT=" (c)199X Pavel Běhal, pavel (at) behal.cz\\n"
TXT="$TXT ObnovaNG $OBNOVANG_REV\\n"
TXT="$TXT (c)2003,2004 Lukáš Kubín, lukas.kubin (at) gmail.com\\n"
TXT="$TXT (c)2005,2006,2007,2008 Lukáš Macura, macura (at) opf.slu.cz\\n"
TXT="$TXT (c)2008? Tomáš Králík, runyar (at) gmail.com\\n"
TXT="$TXT (c)2008-2010 Jakub Ježíšek, Pavel Bačo (annoying testers)\\n"
TXT="$TXT (c)2010 Jan Chmela (mEAN reporter)\\n"
TXT="$TXT Slezská univerzita v Opavě\\n"
dialog --backtitle 'SYSTÉM OBNOVY SKUPIN POČÍTAČOVÝCH STANIC' --begin 4 1 --ascii-lines --infobox "$TXT" 10 $COLUMNS
}

logo2 ()
{
TXT=" See https://github.com/limosek/obnovang for more details\\n"
TXT="$TXT ObnovaNG $OBNOVANG_REV\\n"
TXT="$TXT Prave probiha obnova! Pockejte na dokonceni!\\n"
TXT="$TXT ObnovaNG is runing! Do not touch system!\\n"
TXT="$TXT Thank you for using ObnovaNG!\\n"
dialog --backtitle 'OBNOVANG SYSTEM' --begin 4 1 --ascii-lines --infobox "$TXT" 10 $COLUMNS
}

#
# Delete the "BUSY" file of this group
#
delBusyGroup ()
{
	COMMAND="rm -f ${SODIR}/data/$GROUPNAME/BUSY"
	ANSWER=$(ssh -p $SSHPORT $USERNAME@$SERVERADDRESS $COMMAND)
	if [ "$ANSWER" != "" -o $? -ne 0 ]; then
		log 1 "couldn't remove BUSY file for group $GROUPNAME"
		echo -e $TES"Nepodarilo se smazat \"BUSY\" soubor teto skupiny.\nDokud bude soubor BUSY existovat v adresari teto skupiny, nebude mozne provadet obnovy ani zalohy teto skupiny."$TEE
	else
		log 3 "BUSY file for group $GROUPNAME removed"
	fi
}

#
# Check presence of "BUSY" file in group's data directory,
# which means a backup is already running there or a previous
# backup didn't finish correctly.
#
checkBusyGroup ()
{
	LOOP=1
	while [ "$LOOP" != 0 ]
	do
		rsync -qa "$OBNOVAPATH/data/$GROUPNAME/BUSY" 2>/dev/null>&1
		if [ "$?" = 0 ]; then
			log 1 "cannot proceed; backup of this group still running at different computer"
			echo -e $TES"Neni mozne spustit system Obnova!\nZakladani dat pro obnovu teto skupiny probiha z jine stanice."$TEE
			if ! getcmdflag unattended; then
				echo -e -n $TQS"Chcete "$TQBS"1"$TQBE")Pokus opakovat nebo "$TQBS"2"$TQBE")Ukoncit? ("$TQBS"1"$TQBE"/2)"$TQE" "
				read ANSWER
				if [ "$ANSWER" = "2" ]; then
					exit 1
				elif [ "$ANSWER" = "3" ]; then
					delBusyGroup
				fi
			else
				exit 1
			fi
		else
			LOOP=0
		fi
	done
}

#
# Mount the selected block device
#
mountPartition ()
{
	BACKUPDEVICE=$1
	MOUNTPOINT=$2
	PARTNAME=$(echo $BACKUPDEVICE|sed "s/\/dev\///")
	log 3 "DEBUG: entering mountPartition PARTNAME: $PARTNAME fc with parameters $BACKUPDEVICE on $MOUNTPOINT"
	#
	# Try to read mount.conf (including mount options) from server
	#
	rsync -qa $OBNOVAPATH/data/$GROUPNAME/mount.conf $ETCDIR/$GROUPNAME.mount.conf 2>/dev/null>&1
	if [ $? = 0 ]; then
		log 3 "found mount.conf for this group"
		THISPART=$(cat $ETCDIR/$GROUPNAME.mount.conf|grep -i "^${PARTNAME}"|sed "s/[ 	]\+/ /g")
		log 3 "DEBUG: THISPART=$THISPART"
		if [ "$THISPART" != "" ]; then
			FSTYPE=$(echo $THISPART|cut -d" " -f2)
			PARAMS="-t "$FSTYPE
			OPTIONS=$(echo $THISPART|cut -d" " -f3)
			if [ "$OPTIONS" != "" ]; then
				PARAMS=$PARAMS" -o $OPTIONS"
			fi
		else
			log 3 "no entry for partition $PARTNAME found in mount.conf for this group, using empty"
			PARAMS=""
		fi
		log 3 "DEBUG: PARAMS=$PARAMS"
	else
		log 3 "not found mount.conf for this group, using defaults"
		PARAMS=$DEFAULT_MOUNTCONF
	fi
	if [ -x "/bin/fsck.$FSTYPE" ]; then
	  echo "Testuji zarizeni $BACKUPDEVICE ($FSTYPE)"
	  /bin/fsck -yC $BACKUPDEVICE
	fi
	echo -n "Pripojuji zarizeni $BACKUPDEVICE na $MOUNTPOINT."
	log 3 "DEBUG: Going to mount $BACKUPDEVICE on $MOUNTPOINT"
	mkdir $MOUNTPOINT
	debugshell initmount
	mount $PARAMS $BACKUPDEVICE $MOUNTPOINT 2>/dev/null>&1
	debugshell initmount
	if [ $? -eq 0 ]; then
		log 3 "$BACKUPDEVICE mounted on $MOUNTPOINT"
		echo -e $TOK
		sleep 1
	else
		log 1 "couldn't mount $BACKUPDEVICE to $MOUNTPOINT. PARAMS: $PARAMS, BACKUPDEVICE: $BACKUPDEVICE"
		echo -e $TNOK
		echo -e $TES"\nNepodarilo se pripojit zarizeni $BACKUPDEVICE na $MOUNTPOINT!"$TEE
		echo -e $TES"\nNeni mozne pokracovat v systemu obnovy."$TEE
		exit 1
	fi
}

loadmodules () {
  for i in sbp2 eth1394 processor fan thermal ide-disk aec62xx alim15x3 amd74xx atiixp cmd64x cs5520 cs5530 cs5535 cy82c693 generic piix rz1000 sc1200 serverworks siimage sis5513 slc90e66 triflex trm290 via82cxxx sata_promise ahci ata_piix libata pdc_adma sata_mv sata_nv scsi_transport_spi sata_qstor sata_sil24 sata_sil sata_sis sata_svw sata_sx4 sata_uli sata_via sata_vsc sd_mod sg firmware_class floppy sx8 usbhid usbkbd usbcore ehci-hcd ohci-hcd uhci-hcd digi_acceleport belkin_sa cp2101 usbserial usb-storage i82092 rsrc_nonstatic generic_serial serial_cs 3c59x 8139too e100 natsemi ne2k-pci tg3 tulip winbond-840 8390 mii vfat fat nls_iso8859-1 nls_iso8859-2 nls_cp437 nls_cp852 isofs ntfs ext3 jbd fuse ide-generic mptsas mptscsih ehci-hcd ehci-pci uhci-hcd ohci-hcd ohci-pci xhci-hcd hid usbhid hid-generic; do
     echo modprobe `basename $i .ko` >/dev/tty3
     echo -n "."
     modprobe `basename $i .ko`
  done 
}

initnet () {
  unset LANG
  dhclient -lf /tmp/dhcp eth0
  if ! ifconfig eth0 | grep 'inet addr:' >/dev/null; then
    killall dhclient 
    sleep 2
    dhclient -lf /tmp/dhcp eth0
  fi
  (sleep 10; sntp -S pool.ntp.org && NTP=1; true) &
}


runsshd () {
(mknod /dev/urandom c 1 9
mknod /dev/random c 1 8
mknod /dev/tty c 5 0
mkdir /run/sshd
mkdir -p /tmp/root/.ssh
chmod 700 /tmp/root/.ssh
cp /etc/ssh/authorized_keys /tmp/root/.ssh/
cp /etc/ssh/known_hosts /tmp/root/.ssh/
chmod -R 600 /etc/ssh/* 
mkdir -p /dev/pts && mount -t devpts -o rw,nosuid,noexec,relatime,gid=5,mode=620 devpts /dev/pts
/bin/sshd ) 2>/dev/null
}

debugshell () {
  if [ "$DEBUGSHELL" = "$1" ]; then
    echo -e "\n\n\nDebug shell at $1. Continue by Enter.\n\n\n"
    /bin/sh -i
  fi
}

editreg () {
  local regfile="$1"
  local key="$(echo $2 | tr '/' '\')"
  local value="$3"
  echo "Editing $key to $value in $regfile"
  (echo ed "$key";
   sleep 0.3
   echo "$value";
   sleep 0.3
   echo "q";
   sleep 0.1
   echo "y";
  ) | chntpw -e $regfile
  (echo "cat $key"
   echo "q"
  ) | chntpw -e $regfile
}

# Get parameter value from kernel commandline
# Parameters: name
# Example: getkernelparm o_server will return its value on stdout
getcmdvar () {
  cat /proc/cmdline | tr ' ' '\n' | grep "$1=" | cut -d '=' -f 2 | cut -d '"' -f 2
}

# Get parameter flag from kernel commandline
# Parameters: name
# Returns true or false
getcmdflag () {
  cat /proc/cmdline | tr ' ' '\n' | grep -qE "^$1\$"
}

